### chemain dossier maison
cd Documents/www/symfony-1/exoSession/SymfonySession

### chemain dossier ecole
cd laragon\www\camille\SymfonySession

//personnel trainerRepo

    //Afficher les sessions ou le prof n'enseigne pes //
    public function getSessionLeft($trainer_id)
    {
        //j'appelle la classe EntityManager qui contien la fonction createQueryBuilder
        $entityManager = $this->getEntityManager();

        $subQuery = $entityManager->createQueryBuilder();

        // Sélectionner tous les stagiaires inscrit d'une session dont l'id est passé en paramètre (sous requête)
        $subQuery->select('s.id')
                ->from('App\Entity\Session', 's')
                ->join('s.trainer', 't')
                ->where('t.id = :id')
                ->setParameter('id', $trainer_id);

        $qb = $entityManager->createQueryBuilder();

        // requête principale (query builder)  : Sélectionner tous les stagiaires qui ne sont pas dans le résultat précédent (les non-inscrit, donc) en utilisant le resultat de la sous requete (le where  exclut les stagiaires qui ont un ID qui est dans la sous-requête.)
        $qb->select('sl')
        ->from('App\Entity\Session', 'sl')
        ->where($qb->expr()->notIn('sl.id', $subQuery->getDQL()))
        ->orderBy('sl.startDate', 'DESC')
        ->setParameter('id', $trainer_id);

        //fonction exécute la requête et renvoie le résultat sous forme d'un tableau d'objets$trainer
        return $qb->getQuery()->getResult();
    }

//Personnel sessionRepo

    //Afficher les stagiaires non inscrits //
public function getNonSubscriber($session_id)
{
    //j'appelle la classe EntityManager qui contien la fonction createQueryBuilder
    $entityManager = $this->getEntityManager();

    $subQuery = $entityManager->createQueryBuilder();

    // Sélectionner tous les stagiaires inscrit d'une session dont l'id est passé en paramètre (sous requête)
    $subQuery->select('i.id')
            ->from('App\Entity\Intern', 'i')
            ->join('i.sessions', 's')
            ->where('s.id = :id')
            ->setParameter('id', $session_id);

    $qb = $entityManager->createQueryBuilder();

    // requête principale (query builder)  : Sélectionner tous les stagiaires qui ne sont pas dans le résultat précédent (les non-inscrit, donc) en utilisant le resultat de la sous requete (le where  exclut les stagiaires qui ont un ID qui est dans la sous-requête.)
    $qb->select('it')
    ->from('App\Entity\Intern', 'it')
    ->where($qb->expr()->notIn('it.id', $subQuery->getDQL()))
    ->orderBy('it.name', 'ASC')
    ->setParameter('id', $session_id);

    //fonction exécute la requête et renvoie le résultat sous forme d'un tableau d'objets Intern
    return $qb->getQuery()->getResult();
}

 //Afficher les modules non utilisés //
 public function getNonProgrammed($session_id)
{
    //j'appelle la classe EntityManager qui contien la fonction createQueryBuilder
    $entityManager = $this->getEntityManager();

    $subQuery = $entityManager->createQueryBuilder();

    // Sélectionner tous les stagiaires inscrit d'une session dont l'id est passé en paramètre (sous requête)
    $subQuery->select('p.id')
            ->from('App\Entity\Programme', 'p')
            ->join('p.session', 's')
            ->where('s.id = :id')
            ->setParameter('id', $session_id);

    $qb = $entityManager->createQueryBuilder();

    // requête principale (query builder)  : Sélectionner tous les stagiaires qui ne sont pas dans le résultat précédent (les non-inscrit, donc) en utilisant le resultat de la sous requete (le where  exclut les stagiaires qui ont un ID qui est dans la sous-requête.)
    $qb->select('np')
    ->from('App\Entity\Programme', 'np')
    ->where($qb->expr()->notIn('np.id', $subQuery->getDQL()))
    ->orderBy('np.moduleDuration', 'DESC')
    ->setParameter('id', $session_id);

    //fonction exécute la requête et renvoie le résultat sous forme d'un tableau d'objets Intern
    return $qb->getQuery()->getResult();
}

//methode personnelle SessionController

/** Methode personnelle */
    
    public function getFrenchStartDate()
    {
        date_default_timezone_set('Europe/Paris');
        //je recupére mes objet datetime
        $start = $this->startDate;


        //je formate mes objetS
        $frenchStartDate = \IntlDateFormatter::formatObject(
            $start, IntlDateFormatter::RELATIVE_SHORT, 'fr_FR');



        return $frenchStartDate;
    
    }

    public function getFrenchEndDate()
    {
        date_default_timezone_set('Europe/Paris');
        //je recupére mes objet datetime
        $end = $this->endDate;

        //je formate mes objetS

        $frenchEndDate = \IntlDateFormatter::formatObject(
            $end, IntlDateFormatter::RELATIVE_SHORT, 'fr_FR');


        return $frenchEndDate ;

    }

    //les programmes
    public function countModulesInSession() 
    {
        $array = $this->programmes;
        
        if(!empty($array) && $array)
        {
           $countModules = count($array);
           return $countModules;
        } else 
        {
            return $countModules = 0;
        }
    }

    public function sumAllDays() 
    {
        $array = $this->programmes;

        $days = 0;

        foreach ($array as $programme)
        {
            $days += $programme->getModuleDuration();
        }

        return $days;

    }

    //Les

    public function countPlaceTaken(){
        //je recupère l'array des inscrit
        $interns = $this->intern;

        if(!empty($interns) && $interns)
        {
            $countPlaceTaken = count($interns);
            return $countPlaceTaken;
        } else 
        {
            echo "pas d'intern dans cette session";
        }

    }

    public function countPlaceLeft(){
        //je recupère le nombre de place et l'array des inscrits
        $nbInit = $this->nbPlace;
        $interns = $this->intern;

        if(!empty($interns) && $interns)
        {
            $countPlaceTaken = count($interns);
            //cas ou il n'y a pas de place disponible
            if($countPlaceTaken < $nbInit) 
            {
                $countPlaceLeft = $nbInit - $countPlaceTaken;
                return $countPlaceLeft;
            }
            else 
            {
                return $countPlaceLeft = 0 ;
            }
            
        } else 
        {
            echo "pas d'intern dans cette session";
        }

    }

    /** Methode to String */

    public function __toString()
    {
        return $this->title;
    }

    public function getTrainer(): ?Trainer
    {
        return $this->trainer;
    }

    public function setTrainer(?Trainer $trainer): self
    {
        $this->trainer = $trainer;

        return $this;
    }